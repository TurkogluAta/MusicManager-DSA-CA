/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicmanager;

import java.awt.Point;

/**
 *
 * @author ataturkoglu
 */
public class musicPlayerGUI extends javax.swing.JFrame {

    private StackInterface stackInterface;
    private DLLinterface playlist1;
    private DLLinterface playlist2;
    private int currentSongIndex1;
    private int currentSongIndex2;

    /**
     * Creates new form musicPlayerGUI
     */
    public musicPlayerGUI(StackInterface stackInterface, DLLinterface playlist1, DLLinterface playlist2) {
        initComponents();
        this.stackInterface = stackInterface;
        this.playlist1 = playlist1;
        this.playlist2 = playlist2;
        currentSongIndex1 = 1;
        currentSongIndex2 = 0;
        playingSongLabel.setText("Select a playlist to listen to and press the Next button.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        controllerPanel = new javax.swing.JPanel();
        repeatCheckBox = new javax.swing.JCheckBox();
        previousSongBtn = new javax.swing.JButton();
        nextSongBtn = new javax.swing.JButton();
        playingSongLabel = new javax.swing.JLabel();
        playlistComboBox = new javax.swing.JComboBox<>();
        picturePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        exitBtn = new javax.swing.JButton();
        appLabel = new javax.swing.JLabel();
        navBar = new javax.swing.JMenuBar();
        manageLikedMenu = new javax.swing.JMenu();
        ManageLiked = new javax.swing.JMenuItem();
        managePlaylistMenu = new javax.swing.JMenu();
        managePlaylists = new javax.swing.JMenuItem();
        musicPlayerMenu = new javax.swing.JMenu();
        musicPlayer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(51, 51, 51));

        controllerPanel.setBackground(new java.awt.Color(102, 255, 102));

        repeatCheckBox.setText("Repeat");
        repeatCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatCheckBoxActionPerformed(evt);
            }
        });

        previousSongBtn.setText("Previous Song");
        previousSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousSongBtnActionPerformed(evt);
            }
        });

        nextSongBtn.setText("Next Song");
        nextSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextSongBtnActionPerformed(evt);
            }
        });

        playingSongLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        playingSongLabel.setText("Now playing \"x\"");

        playlistComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rock", "Classical music" }));
        playlistComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controllerPanelLayout = new javax.swing.GroupLayout(controllerPanel);
        controllerPanel.setLayout(controllerPanelLayout);
        controllerPanelLayout.setHorizontalGroup(
            controllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controllerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controllerPanelLayout.createSequentialGroup()
                        .addComponent(playingSongLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(controllerPanelLayout.createSequentialGroup()
                        .addComponent(playlistComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(repeatCheckBox)
                        .addGap(27, 27, 27))
                    .addGroup(controllerPanelLayout.createSequentialGroup()
                        .addComponent(previousSongBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(nextSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        controllerPanelLayout.setVerticalGroup(
            controllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controllerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playlistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repeatCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playingSongLabel)
                .addGap(18, 18, 18)
                .addGroup(controllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousSongBtn)
                    .addComponent(nextSongBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        picturePanel.setBackground(new java.awt.Color(102, 255, 102));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/player.jpg"))); // NOI18N

        javax.swing.GroupLayout picturePanelLayout = new javax.swing.GroupLayout(picturePanel);
        picturePanel.setLayout(picturePanelLayout);
        picturePanelLayout.setHorizontalGroup(
            picturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        picturePanelLayout.setVerticalGroup(
            picturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        appLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        appLabel.setText("Music Manager App");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(controllerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addGap(44, 44, 44)
                                    .addComponent(picturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addGap(85, 85, 85)
                                    .addComponent(appLabel))))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(appLabel)
                .addGap(28, 28, 28)
                .addComponent(picturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(controllerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(exitBtn)
                .addContainerGap())
        );

        navBar.setBackground(new java.awt.Color(102, 102, 102));

        manageLikedMenu.setText("Manage Liked");

        ManageLiked.setText("Manage Liked");
        ManageLiked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageLikedActionPerformed(evt);
            }
        });
        manageLikedMenu.add(ManageLiked);

        navBar.add(manageLikedMenu);

        managePlaylistMenu.setText("Manage Playlists");

        managePlaylists.setText("Manage Playlists");
        managePlaylists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePlaylistsActionPerformed(evt);
            }
        });
        managePlaylistMenu.add(managePlaylists);

        navBar.add(managePlaylistMenu);

        musicPlayerMenu.setText("Music Player");

        musicPlayer.setText("Music Player");
        musicPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicPlayerActionPerformed(evt);
            }
        });
        musicPlayerMenu.add(musicPlayer);

        navBar.add(musicPlayerMenu);

        setJMenuBar(navBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ManageLikedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageLikedActionPerformed
        // TODO add your handling code here:
        Point currentLocation = this.getLocation();

        this.setVisible(false);
        this.dispose();

        ManageLikedGUI manageLikedGUI = new ManageLikedGUI(stackInterface, playlist1, playlist2);

        manageLikedGUI.setLocation(currentLocation);

        manageLikedGUI.setVisible(true);
    }//GEN-LAST:event_ManageLikedActionPerformed

    private void managePlaylistsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePlaylistsActionPerformed
        // TODO add your handling code here:
        Point currentLocation = this.getLocation();

        this.setVisible(false);
        this.dispose();

        ManagePlaylistsGUI managePlaylistsGUI = new ManagePlaylistsGUI(stackInterface, playlist1, playlist2);

        managePlaylistsGUI.setLocation(currentLocation);

        managePlaylistsGUI.setVisible(true);
    }//GEN-LAST:event_managePlaylistsActionPerformed

    private void musicPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicPlayerActionPerformed
        // TODO add your handling code here:
        Point currentLocation = this.getLocation();

        this.setVisible(false);
        this.dispose();

        musicPlayerGUI playerGUI = new musicPlayerGUI(stackInterface, playlist1, playlist2);

        playerGUI.setLocation(currentLocation);

        playerGUI.setVisible(true);
    }//GEN-LAST:event_musicPlayerActionPerformed

    private void repeatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_repeatCheckBoxActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void nextSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextSongBtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = playlistComboBox.getSelectedIndex();

        if (selectedIndex == 0) {

            if (!playlist1.isEmpty()) {

                if (currentSongIndex1 > playlist1.size()) {
                    if (repeatCheckBox.isSelected()) {
                        currentSongIndex1 = 1;
                    } else {
                        playingSongLabel.setText("End of Rock playlist.");
                        currentSongIndex1 = playlist1.size() + 1; // Reset for next action
                        return;
                    }
                }
                DLLnode node = (DLLnode) playlist1.get(currentSongIndex1);
                musicData songData = (musicData) node.getElement();
                playingSongLabel.setText("Now playing: " + songData.toString());
                currentSongIndex1++;
            } else {
                playingSongLabel.setText("Rock playlist is empty.");
            }
            
        } else if (selectedIndex == 1) {

            if (!playlist2.isEmpty()) {

                if (currentSongIndex2 > playlist2.size()) {
                    if (repeatCheckBox.isSelected()) {
                        currentSongIndex2 = 1;
                    } else {
                        playingSongLabel.setText("End of Classical music playlist.");
                        currentSongIndex2 = playlist2.size() + 1; // Reset for next action
                        return;
                    }
                }
                DLLnode node = (DLLnode) playlist2.get(currentSongIndex2);
                musicData songData = (musicData) node.getElement();
                playingSongLabel.setText("Now playing: " + songData.toString());
                currentSongIndex2++;
            } else {
                playingSongLabel.setText("Classical music playlist is empty.");
            }

        }
    }//GEN-LAST:event_nextSongBtnActionPerformed

    private void playlistComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playlistComboBoxActionPerformed

    private void previousSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousSongBtnActionPerformed
        // TODO add your handling code here:                                          
        int selectedIndex = playlistComboBox.getSelectedIndex();
        if (selectedIndex == 0) {
            if (!playlist1.isEmpty()) {
                if (currentSongIndex1 <= 1) {
                    if (repeatCheckBox.isSelected()) {
                        currentSongIndex1 = playlist1.size();
                    } else {
                        playingSongLabel.setText("Start of Rock playlist.");
                        return;
                    }
                } else {
                    currentSongIndex1--;
                }
                DLLnode node = (DLLnode) playlist1.get(currentSongIndex1);
                musicData songData = (musicData) node.getElement();
                playingSongLabel.setText("Now playing: " + songData.toString());
            } else {
                playingSongLabel.setText("Rock playlist is empty.");
            }
        } else if (selectedIndex == 1) {
            if (!playlist2.isEmpty()) {
                if (currentSongIndex2 <= 1) {
                    if (repeatCheckBox.isSelected()) {
                        currentSongIndex2 = playlist2.size();
                    } else {
                        playingSongLabel.setText("Start of Classical music playlist.");
                        return;
                    }
                } else {
                    currentSongIndex2--;
                }
                DLLnode node = (DLLnode) playlist2.get(currentSongIndex2);
                musicData songData = (musicData) node.getElement();
                playingSongLabel.setText("Now playing: " + songData.toString());
            } else {
                playingSongLabel.setText("Classical music playlist is empty.");
            }
        }
    }//GEN-LAST:event_previousSongBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(musicPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(musicPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(musicPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(musicPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ManageLiked;
    private javax.swing.JLabel appLabel;
    private javax.swing.JPanel controllerPanel;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenu manageLikedMenu;
    private javax.swing.JMenu managePlaylistMenu;
    private javax.swing.JMenuItem managePlaylists;
    private javax.swing.JMenuItem musicPlayer;
    private javax.swing.JMenu musicPlayerMenu;
    private javax.swing.JMenuBar navBar;
    private javax.swing.JButton nextSongBtn;
    private javax.swing.JPanel picturePanel;
    private javax.swing.JLabel playingSongLabel;
    private javax.swing.JComboBox<String> playlistComboBox;
    private javax.swing.JButton previousSongBtn;
    private javax.swing.JCheckBox repeatCheckBox;
    // End of variables declaration//GEN-END:variables
}
