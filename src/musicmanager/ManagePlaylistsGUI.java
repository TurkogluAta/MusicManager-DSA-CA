/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicmanager;

import java.awt.Point;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author Ata Turkoglu
 */
/**
 * This class represents the GUI for a music player
 */
public class ManagePlaylistsGUI extends javax.swing.JFrame {

    private StackInterface stackInterface; // Interface for the stack that holds liked songs
    private DLLinterface playlist1; // First playlist a doubly linked list
    private DLLinterface playlist2; // Second playlist a doubly linked list
    private boolean otherButtonClicked;

    /**
     * Creates new form ManagePlaylistsGUI
     */
    /**
     * This class provides a graphical user interface for managing music
     * playlists.
     */
    public ManagePlaylistsGUI(StackInterface stackInterface, DLLinterface playlist1, DLLinterface playlist2) {
        this.stackInterface = stackInterface;
        this.playlist1 = playlist1;
        this.playlist2 = playlist2;
        initComponents();
        otherButtonClicked = false;
        musicCountPlaylist(); // Updates the GUI to show the current number of songs in each playlist
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        addPlaylistPanel = new javax.swing.JPanel();
        addPlaylistBtn = new javax.swing.JButton();
        genreComboBox = new javax.swing.JComboBox<>();
        playlist1CountLabel = new javax.swing.JLabel();
        playlist2CountLabel = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JToggleButton();
        appLabel = new javax.swing.JLabel();
        exitBtn = new javax.swing.JButton();
        playlistControlPanel = new javax.swing.JPanel();
        displayComboBox = new javax.swing.JComboBox<>();
        displayPlaylistBtn = new javax.swing.JButton();
        displayPlaylistBwdBtn = new javax.swing.JButton();
        musicManagerSP = new javax.swing.JScrollPane();
        musicManagerTA = new javax.swing.JTextArea();
        moveSongPanel = new javax.swing.JPanel();
        moveBtn = new javax.swing.JButton();
        sourceComboBox = new javax.swing.JComboBox<>();
        targetComboBox = new javax.swing.JComboBox<>();
        sourceSpinner = new javax.swing.JSpinner();
        targetSpinner = new javax.swing.JSpinner();
        navBar = new javax.swing.JMenuBar();
        manageLikedMenu = new javax.swing.JMenu();
        ManageLiked = new javax.swing.JMenuItem();
        managePlaylistMenu = new javax.swing.JMenu();
        managePlaylists = new javax.swing.JMenuItem();
        musicPlayerMenu = new javax.swing.JMenu();
        musicPlayer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(51, 51, 51));

        addPlaylistPanel.setBackground(new java.awt.Color(102, 255, 102));
        addPlaylistPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addPlaylistPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addPlaylistBtn.setText("Add playlist");
        addPlaylistBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addPlaylistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaylistBtnActionPerformed(evt);
            }
        });
        addPlaylistPanel.add(addPlaylistBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 130, -1));

        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rock", "Classical music" }));
        genreComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreComboBoxActionPerformed(evt);
            }
        });
        addPlaylistPanel.add(genreComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        playlist1CountLabel.setText(" You currently have \"x\" songs in your Rock playlist.");
        addPlaylistPanel.add(playlist1CountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        playlist2CountLabel.setText(" You currently have \"x\" songs in your Classical music playlist.");
        addPlaylistPanel.add(playlist2CountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        searchBtn.setText("Search");
        searchBtn.setToolTipText("");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        addPlaylistPanel.add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 130, -1));

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        addPlaylistPanel.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 130, -1));

        appLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        appLabel.setText("Music Manager App");

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        playlistControlPanel.setBackground(new java.awt.Color(102, 255, 102));
        playlistControlPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        displayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rock", "Classical music" }));
        displayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayComboBoxActionPerformed(evt);
            }
        });

        displayPlaylistBtn.setText("Display Playlist");
        displayPlaylistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayPlaylistBtnActionPerformed(evt);
            }
        });

        displayPlaylistBwdBtn.setText("Display Playlist Backward");
        displayPlaylistBwdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayPlaylistBwdBtnActionPerformed(evt);
            }
        });

        musicManagerTA.setColumns(20);
        musicManagerTA.setLineWrap(true);
        musicManagerTA.setRows(5);
        musicManagerSP.setViewportView(musicManagerTA);

        javax.swing.GroupLayout playlistControlPanelLayout = new javax.swing.GroupLayout(playlistControlPanel);
        playlistControlPanel.setLayout(playlistControlPanelLayout);
        playlistControlPanelLayout.setHorizontalGroup(
            playlistControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistControlPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(playlistControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playlistControlPanelLayout.createSequentialGroup()
                        .addComponent(displayPlaylistBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayPlaylistBwdBtn))
                    .addGroup(playlistControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(musicManagerSP)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playlistControlPanelLayout.setVerticalGroup(
            playlistControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playlistControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayPlaylistBtn)
                    .addComponent(displayPlaylistBwdBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(musicManagerSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        moveSongPanel.setBackground(new java.awt.Color(102, 255, 102));
        moveSongPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        moveBtn.setText("Move");
        moveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBtnActionPerformed(evt);
            }
        });

        sourceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rock", "Classical music" }));
        sourceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceComboBoxActionPerformed(evt);
            }
        });

        targetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rock", "Classical music" }));
        targetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetComboBoxActionPerformed(evt);
            }
        });

        sourceSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        targetSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        javax.swing.GroupLayout moveSongPanelLayout = new javax.swing.GroupLayout(moveSongPanel);
        moveSongPanel.setLayout(moveSongPanelLayout);
        moveSongPanelLayout.setHorizontalGroup(
            moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moveSongPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(moveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(moveSongPanelLayout.createSequentialGroup()
                        .addGroup(moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(targetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sourceComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(targetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14))
        );
        moveSongPanelLayout.setVerticalGroup(
            moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moveSongPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moveSongPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveBtn)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(appLabel)
                .addGap(73, 166, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(playlistControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addPlaylistPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveSongPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(appLabel)
                .addGap(18, 18, 18)
                .addComponent(addPlaylistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveSongPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playlistControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(84, 84, 84)
                .addComponent(exitBtn)
                .addContainerGap())
        );

        navBar.setBackground(new java.awt.Color(102, 102, 102));

        manageLikedMenu.setText("Manage Liked");

        ManageLiked.setText("Manage Liked");
        ManageLiked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageLikedActionPerformed(evt);
            }
        });
        manageLikedMenu.add(ManageLiked);

        navBar.add(manageLikedMenu);

        managePlaylistMenu.setText("Manage Playlists");

        managePlaylists.setText("Manage Playlists");
        managePlaylists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePlaylistsActionPerformed(evt);
            }
        });
        managePlaylistMenu.add(managePlaylists);

        navBar.add(managePlaylistMenu);

        musicPlayerMenu.setText("Music Player");

        musicPlayer.setText("Music Player");
        musicPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicPlayerActionPerformed(evt);
            }
        });
        musicPlayerMenu.add(musicPlayer);

        navBar.add(musicPlayerMenu);

        setJMenuBar(navBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Saves the current state of both playlists to a file
    private void Save() {
        File f;
        FileOutputStream fStream;
        ObjectOutputStream oStream;

        try {
            f = new File("MusicManager2.dat");
            fStream = new FileOutputStream(f);
            oStream = new ObjectOutputStream(fStream);

            oStream.writeObject(playlist1);
            oStream.writeObject(playlist2);

            oStream.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e, "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Updates the labels to show the current number of songs in each playlist
    private void musicCountPlaylist() {
        int playlist1Count = playlist1.size();
        int playlist2Count = playlist2.size();

        if (!playlist1.isEmpty()) {
            playlist1CountLabel.setText("Currently you have '" + playlist1Count + "' song in Rock playlist.");
        } else {
            playlist1CountLabel.setText("Currently you don't have any song in Rock playlist.");
        }

        if (!playlist2.isEmpty()) {
            playlist2CountLabel.setText("Currently you have '" + playlist2Count + "' song in Classical music playlist.");
        } else {
            playlist2CountLabel.setText("Currently you don't have any song in Classical music playlist.");
        }
    }

    private void addPlaylistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaylistBtnActionPerformed
        // TODO add your handling code here:

        // Clears the text area if another button was previously clicked
        if (otherButtonClicked) {
            musicManagerTA.setText("");
            otherButtonClicked = false;
        }

        // Checks if there are any liked songs to add
        if (!stackInterface.isEmpty()) {
            musicData lastLikedSong;
            // Peeks at the last liked song without removing it from the stack
            lastLikedSong = stackInterface.peek();
            String songName = lastLikedSong.getSongName();

            // Checks if the song is already in either playlist to prevent duplicates
            int indexInPlaylist1 = playlist1.getIndex(songName);
            int indexInPlaylist2 = playlist2.getIndex(songName);

            // Determines which playlist the user has selected to add the song to
            int selectedIndex = genreComboBox.getSelectedIndex();

            // For Rock playlist
            if (selectedIndex == 0) {
                if (indexInPlaylist1 > 0) {
                    musicManagerTA.append("The song is already in your Rock playlist.\n");

                } else {
                    // Adds the song to the end of Playlist 1 and updates the GUI
                    playlist1.add(playlist1.size() + 1, lastLikedSong);
                    musicManagerTA.append(lastLikedSong + " added to your Rock playlist.\n");
                }

                // For Classical music playlist.
            } else if (selectedIndex == 1) {
                if (indexInPlaylist2 > 0) {
                    musicManagerTA.append("The song is already in your Classical music playlist. \n");

                } else {
                    // Adds the song to the end of Playlist 2 and updates the GUI
                    playlist2.add(playlist2.size() + 1, lastLikedSong);
                    musicManagerTA.append(lastLikedSong + " added to your Classical music playlist.\n");
                }
            }
            Save(); // Saves the updated playlists to a file
            musicCountPlaylist();
        } else {
            musicManagerTA.setText("You don't have any liked songs.\n");
        }
    }//GEN-LAST:event_addPlaylistBtnActionPerformed

    // Searches for a song in the playlists
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        otherButtonClicked = true;

        // Proceeds only if at least one of the playlists is not empty
        if (!playlist1.isEmpty() || !playlist2.isEmpty()) {
            String searchTerm = JOptionPane.showInputDialog(null, "Please enter a search term.");

            // Checks if a valid search term was entered
            if (searchTerm == null || searchTerm.isEmpty()) {
                return;
            } else if (searchTerm != null && !searchTerm.trim().isEmpty()) {
                // Searches for the song in both playlists
                int indexInPlaylist1 = playlist1.getIndex(searchTerm);
                int indexInPlaylist2 = playlist2.getIndex(searchTerm);

                // Updates the GUI based on the search results
                if (indexInPlaylist1 > 0 && indexInPlaylist2 > 0) {
                    musicManagerTA.setText("The song you are looking for is in position " + indexInPlaylist1 + " in the Rock playlist.\n\n");
                    musicManagerTA.append("The song you are looking for is in position " + indexInPlaylist2 + " in the Classical music playlist.");

                } else if (indexInPlaylist1 > 0) {
                    musicManagerTA.setText("The song you are looking for is in position " + indexInPlaylist1 + " in the Rock playlist.");

                } else if (indexInPlaylist2 > 0) {
                    musicManagerTA.setText("The song you are looking for is in position " + indexInPlaylist2 + " in the Classical music playlist.");

                } else {
                    musicManagerTA.setText("This song is not in any of your playlists");
                }
            } else {
                musicManagerTA.setText("Please enter a valid search term.");
            }
        } else {
            musicManagerTA.setText("Your playlists are empty.");
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        if (otherButtonClicked) {
            musicManagerTA.setText("");
            otherButtonClicked = false;
        }

        // Proceeds only if at least one of the playlists is not empty
        if (playlist1.isEmpty() && playlist2.isEmpty()) {
            musicManagerTA.setText("Your playlists are empty.");
            return;
        }

        String deleteTerm = JOptionPane.showInputDialog(null, "Please enter a song name for delete.");
        // Checks if a valid song name was entered.
        if (deleteTerm == null || deleteTerm.trim().isEmpty()) {
            return;
        }

        // Attempts to find and delete the song from the playlists
        int indexInPlaylist1 = playlist1.getIndex(deleteTerm);
        int indexInPlaylist2 = playlist2.getIndex(deleteTerm);

        // If the same song is in both playlists
        // Displays a dialog box with options to choose the playlist
        if (indexInPlaylist1 > 0 && indexInPlaylist2 > 0) {
            String[] options = {"Rock", "Classical Music"};
            int response = JOptionPane.showOptionDialog(null, "Which playlist would you like to delete the song from?", "Choose Playlist", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);

            // '0' for Rock and '1' for Classical Music
            if (response == 0) {
                musicData removedSong1 = playlist1.remove(indexInPlaylist1);
                musicManagerTA.append(removedSong1.toString() + " deleted from your Rock playlist.\n");

            } else if (response == 1) {
                musicData removedSong2 = playlist2.remove(indexInPlaylist2);
                musicManagerTA.append(removedSong2.toString() + " deleted from your Classical music playlist.\n");
            }

        } else if (indexInPlaylist1 > 0) {
            musicData removedSong1 = playlist1.remove(indexInPlaylist1);
            musicManagerTA.append(removedSong1.toString() + " deleted from your Rock playlist.\n");

        } else if (indexInPlaylist2 > 0) {
            musicData removedSong2 = playlist2.remove(indexInPlaylist2);
            musicManagerTA.append(removedSong2.toString() + " deleted from your Classical music playlist.\n");

        } else {
            musicManagerTA.append("This song is not in any of your playlists.\n");
        }

        musicCountPlaylist(); // Updates the song count for both playlists
        Save(); // Saves the updated playlists to a file
    }//GEN-LAST:event_deleteBtnActionPerformed


    private void moveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBtnActionPerformed
        // TODO add your handling code here:
        otherButtonClicked = true;

        // Check if both playlists are empty. If so display a message and end the method early
        if (playlist1.isEmpty() && playlist2.isEmpty()) {
            musicManagerTA.setText("Your playlists are empty.");
            return;
        }

        // Source and target playlist indexes based on user selection from combo boxes
        int sourcePlaylistIndex = sourceComboBox.getSelectedIndex();
        int targetPlaylistIndex = targetComboBox.getSelectedIndex();

        // Get the source and target positions the user wants to move the song to and from
        int sourceIndex = (Integer) sourceSpinner.getValue();
        int targetIndex = (Integer) targetSpinner.getValue();

        // Initialize variables for the source and target playlists
        DLLinterface sourcePlaylist = null, targetPlaylist = null;

        // Assign the actual playlists based on the selected indexes
        if (sourcePlaylistIndex == 0) {
            sourcePlaylist = playlist1;
        } else if (sourcePlaylistIndex == 1) {
            sourcePlaylist = playlist2;
        }

        if (targetPlaylistIndex == 0) {
            targetPlaylist = playlist1;
        } else if (targetPlaylistIndex == 1) {
            targetPlaylist = playlist2;
        }

        // If the source playlist is empty, notify the user and exit
        if (sourcePlaylist.isEmpty()) {
            musicManagerTA.setText("Source playlist is empty.");
            return;
        }

        // Check for invalid move conditions and notify the user
        if (sourcePlaylist == targetPlaylist && sourcePlaylist.size() == 1) {
            if (Math.abs(sourceIndex - targetIndex) == 1) { // Kaynak ve hedef indeks arası fark 1 ise
                musicManagerTA.setText("The playlist has only one song, so its position cannot change.");
                return;
            }
        }

        if (sourcePlaylist == targetPlaylist && sourceIndex == targetIndex) {
            musicManagerTA.setText("The song is already in the target position.");
            return;
        }

        // Validate source and target indexes for the move operation
        if (sourceIndex > sourcePlaylist.size()) {
            musicManagerTA.setText("Invalid source index.");
            return;
        }

        // Hedef indeksin geçerliliğini kontrol et
        if (targetIndex > targetPlaylist.size() + 1) {
            musicManagerTA.setText("Invalid target index.");
            return;
        }

        // Attempt to move the song from the source to the target position
        musicData songMove = sourcePlaylist.remove(sourceIndex);
        if (songMove != null) { // If the song was successfully removed from the source playlist

            if (targetPlaylist.getIndex(songMove.getSongName()) != -1) {
                musicManagerTA.setText(songMove.toString() + " is already in the target playlist.");

            } else {
                targetPlaylist.add(targetIndex, songMove); // Add the song to the target playlist at specified index
                musicManagerTA.setText(songMove.toString() + " successfully moved.");
                musicCountPlaylist(); // Update the display of song counts in playlists
                Save(); // Save changes to the playlists
            }
        }
    }//GEN-LAST:event_moveBtnActionPerformed

    private void displayPlaylistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayPlaylistBtnActionPerformed
        // TODO add your handling code here:
        otherButtonClicked = true;
        int selectedIndex;
        selectedIndex = displayComboBox.getSelectedIndex(); // Gets the selected index to determine which playlist to display

        // Checks which playlist is selected and whether it is empty
        if (selectedIndex == 0 && !playlist1.isEmpty()) {
            musicManagerTA.setText(playlist1.printList());

        } else if (selectedIndex == 0 && playlist1.isEmpty()) {
            musicManagerTA.setText("Rock playlist is empty.");

        } else if (selectedIndex == 1 && !playlist2.isEmpty()) {
            musicManagerTA.setText(playlist2.printList());

        } else if (selectedIndex == 1 && playlist2.isEmpty()) {
            musicManagerTA.setText("Classical music playlist is empty.");
        }
    }//GEN-LAST:event_displayPlaylistBtnActionPerformed

    private void ManageLikedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageLikedActionPerformed
        // TODO add your handling code here:
        Point currentLocation = this.getLocation(); // Store current GUI location

        this.setVisible(false); // Hide the current GUI
        this.dispose();

        // Create a new instance of the ManageLikedGUI and make it visible at the same location
        ManageLikedGUI manageLikedGUI = new ManageLikedGUI(stackInterface, playlist1, playlist2);
        manageLikedGUI.setLocation(currentLocation);
        manageLikedGUI.setVisible(true);
    }//GEN-LAST:event_ManageLikedActionPerformed

    private void managePlaylistsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePlaylistsActionPerformed
        // TODO add your handling code here:
        Point currentLocation = this.getLocation(); // Store current GUI location

        this.setVisible(false); // Hide the current GUI
        this.dispose();

        // Create a new instance of the ManagePlaylistGUI and make it visible at the same location
        ManagePlaylistsGUI managePlaylistsGUI = new ManagePlaylistsGUI(stackInterface, playlist1, playlist2);
        managePlaylistsGUI.setLocation(currentLocation);
        managePlaylistsGUI.setVisible(true);
    }//GEN-LAST:event_managePlaylistsActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void genreComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genreComboBoxActionPerformed

    private void displayPlaylistBwdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayPlaylistBwdBtnActionPerformed
        // TODO add your handling code here:
        otherButtonClicked = true;
        int selectedIndex;
        selectedIndex = displayComboBox.getSelectedIndex();
        if (selectedIndex == 0 && !playlist1.isEmpty()) {
            musicManagerTA.setText(playlist1.printListBack());
        } else if (selectedIndex == 0 && playlist1.isEmpty()) {
            musicManagerTA.setText("Rock playlist is empty.");
        } else if (selectedIndex == 1 && !playlist2.isEmpty()) {
            musicManagerTA.setText(playlist2.printListBack());
        } else if (selectedIndex == 1 && playlist2.isEmpty()) {
            musicManagerTA.setText("Classical music playlist is empty.");
        }
    }//GEN-LAST:event_displayPlaylistBwdBtnActionPerformed

    private void displayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayComboBoxActionPerformed

    private void sourceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourceComboBoxActionPerformed

    private void targetComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_targetComboBoxActionPerformed

    private void musicPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicPlayerActionPerformed
        // TODO add your handling code here:
        Point currentLocation = this.getLocation(); // Store current GUI location

        this.setVisible(false); // Hide the current GUI
        this.dispose();

        // Create a new instance of the musicPlayerGUI and make it visible at the same location
        musicPlayerGUI playerGUI = new musicPlayerGUI(stackInterface, playlist1, playlist2);
        playerGUI.setLocation(currentLocation);
        playerGUI.setVisible(true);
    }//GEN-LAST:event_musicPlayerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagePlaylistsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagePlaylistsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagePlaylistsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagePlaylistsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagePlaylistsGUI().setVisible(true);
            }
        });
         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ManageLiked;
    private javax.swing.JButton addPlaylistBtn;
    private javax.swing.JPanel addPlaylistPanel;
    private javax.swing.JLabel appLabel;
    private javax.swing.JToggleButton deleteBtn;
    private javax.swing.JComboBox<String> displayComboBox;
    private javax.swing.JButton displayPlaylistBtn;
    private javax.swing.JButton displayPlaylistBwdBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenu manageLikedMenu;
    private javax.swing.JMenu managePlaylistMenu;
    private javax.swing.JMenuItem managePlaylists;
    private javax.swing.JButton moveBtn;
    private javax.swing.JPanel moveSongPanel;
    private javax.swing.JScrollPane musicManagerSP;
    private javax.swing.JTextArea musicManagerTA;
    private javax.swing.JMenuItem musicPlayer;
    private javax.swing.JMenu musicPlayerMenu;
    private javax.swing.JMenuBar navBar;
    private javax.swing.JLabel playlist1CountLabel;
    private javax.swing.JLabel playlist2CountLabel;
    private javax.swing.JPanel playlistControlPanel;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> sourceComboBox;
    private javax.swing.JSpinner sourceSpinner;
    private javax.swing.JComboBox<String> targetComboBox;
    private javax.swing.JSpinner targetSpinner;
    // End of variables declaration//GEN-END:variables
}
