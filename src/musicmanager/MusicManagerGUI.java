/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicmanager;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author Ata Turkoglu
 */
public class MusicManagerGUI extends javax.swing.JFrame {
private boolean otherButtonClicked = false;

    /**
     * Creates new form MusicManagerGUI
     */
    
    StackInterface stackInterface;
    
    public MusicManagerGUI() {
        initComponents();
        stackInterface = new LikedMusicStack();
        Load();
        musicCount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newMusicTF = new javax.swing.JTextField();
        stackAddBtn = new javax.swing.JButton();
        stackClearBtn = new javax.swing.JButton();
        stackDisplayBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        likedCountTF = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        musicManagerTA = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        stackDltBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Music Manager");

        jLabel2.setText("Add a new song to the liked list ");

        stackAddBtn.setText("Add to liked list");
        stackAddBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stackAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackAddBtnActionPerformed(evt);
            }
        });

        stackClearBtn.setText("Clear liked list ");
        stackClearBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stackClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackClearBtnActionPerformed(evt);
            }
        });

        stackDisplayBtn.setText("Display liked list");
        stackDisplayBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stackDisplayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackDisplayBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Add new song to your Playlists");

        likedCountTF.setText("Currently you have \"x\" song in liked list");

        musicManagerTA.setColumns(20);
        musicManagerTA.setLineWrap(true);
        musicManagerTA.setRows(5);
        jScrollPane1.setViewportView(musicManagerTA);

        jButton4.setText("Playlist 1");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jButton5.setText("Playlist 2");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel8.setText("Now playing \"random song\" from \"Playlist 1\"");

        jButton6.setText("Previous song");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jButton7.setText("Next song");

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        stackDltBtn.setText("Delete last added song");
        stackDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackDltBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jButton4)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(newMusicTF, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stackAddBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(likedCountTF))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(stackClearBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stackDisplayBtn)
                                .addGap(18, 18, 18)
                                .addComponent(stackDltBtn)))
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitBtn)
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(likedCountTF)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newMusicTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stackAddBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stackClearBtn)
                    .addComponent(stackDisplayBtn)
                    .addComponent(stackDltBtn))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton7))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(exitBtn)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean Save() {
        File f;
        FileOutputStream fStream;
        ObjectOutputStream oStream;
        
        try {
            f = new File("MusicManager.dat");
            fStream = new FileOutputStream(f);
            oStream = new ObjectOutputStream(fStream);
            
            oStream.writeObject(stackInterface);
            
            // oStream.writeObject(playlist);
            // oStream.writeObject(playlist2);
            
            oStream.close();
            return true; 
            
        } catch(IOException e) {
            JOptionPane.showMessageDialog(null, e, "WARNING", JOptionPane.WARNING_MESSAGE);
            return false; 
        }
    }
    
    private void Load() {
        File f;
        FileInputStream fStream;
        ObjectInputStream oStream;
        
        try {
            f = new File("MusicManager.dat");
            fStream = new FileInputStream(f);
            oStream = new ObjectInputStream(fStream);
            
            stackInterface = (LikedMusicStack) oStream.readObject();
            
            // playlist = (LinkedList<Song>) oStream.readObject(); 
            // playlist2 = (LinkedList<Song>) oStream.readObject();
       
            oStream.close();
            
        } catch(IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e, "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }
    private void musicCount() {
        int likedCount = stackInterface.size();
        if(!stackInterface.isEmpty()) {
            likedCountTF.setText("Currently you have '"+ likedCount+ "' song in liked list");
        } else {
            likedCountTF.setText("Currently you don't have any liked music");
        }
    }
    
    private void stackClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackClearBtnActionPerformed
        // TODO add your handling code here:
        otherButtonClicked = true;
        if(!stackInterface.isEmpty()) { 
            stackInterface.emptyStack();
            musicManagerTA.setText("All songs in your liked list have been deleted");
            Save();
            musicCount();
        } else {
            musicManagerTA.setText("You don't have any liked music");
        }
    }//GEN-LAST:event_stackClearBtnActionPerformed

    private void stackAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackAddBtnActionPerformed
        // TODO add your handling code here:
        String newMusic = newMusicTF.getText();
        newMusicTF.setText("");
        
        if(otherButtonClicked){
            musicManagerTA.setText("");
            otherButtonClicked =false;
        }
        if(!newMusic.isEmpty()) {
            stackInterface.push(newMusic);
            if (Save()) { 
                musicManagerTA.append(newMusic + " Added to your liked list\n");
                musicCount();
            } 
        } else {
            musicManagerTA.append("Please write a song name\n");
        }
    }//GEN-LAST:event_stackAddBtnActionPerformed

    private void stackDisplayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackDisplayBtnActionPerformed
        // TODO add your handling code here:
otherButtonClicked = true;
        if(!stackInterface.isEmpty()) {
            String likedMusics = stackInterface.displayStack();
            musicManagerTA.setText(likedMusics);
        } else {
            musicManagerTA.setText("You don't have any liked music");
        }
    }//GEN-LAST:event_stackDisplayBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void stackDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackDltBtnActionPerformed
        // TODO add your handling code here:
        if(!stackInterface.isEmpty()) {
            String outLikedMusic;
            outLikedMusic = (String) stackInterface.pop();
            musicManagerTA.append(outLikedMusic + " is deleted from your liked list \n");
            Save();
            musicCount();
        } else { 
            musicManagerTA.setText("You don't have any liked song \n");
            otherButtonClicked = true;
        }
    }//GEN-LAST:event_stackDltBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel likedCountTF;
    private javax.swing.JTextArea musicManagerTA;
    private javax.swing.JTextField newMusicTF;
    private javax.swing.JButton stackAddBtn;
    private javax.swing.JButton stackClearBtn;
    private javax.swing.JButton stackDisplayBtn;
    private javax.swing.JButton stackDltBtn;
    // End of variables declaration//GEN-END:variables
}
